import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üëô –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É—Å–∏–∫–∏"))
menu.add(KeyboardButton("üíå –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"))
menu.add(KeyboardButton("üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å"))
menu.add(KeyboardButton("üì¶ –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –õ–∏—Å–∞ –≤ –∫—Ä—É–∂–µ–≤–∞—Ö ü¶ä\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=menu
    )

@dp.message_handler(lambda m: m.text == "üëô –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä—É—Å–∏–∫–∏")
async def catalog_handler(message: types.Message):
    await message.answer("‚ú® –ö–∞—Ç–∞–ª–æ–≥:\n\n1. –ö—Ä–µ–º–æ–≤–æ–µ –∫—Ä—É–∂–µ–≤–æ ‚Äî 2500‚ÇΩ\n2. –ë–∞—Ä—Ö–∞—Ç –Ω–∞ –∫–æ–∂–µ ‚Äî 2900‚ÇΩ\n\n–ù–∞–ø–∏—à–∏, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å üíå")

@dp.message_handler(lambda m: m.text == "üíå –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def order_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üì¶")

@dp.message_handler(lambda m: m.text == "üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å")
async def pay_handler(message: types.Message):
    await message.answer("–û–ø–ª–∞—Ç–∞: USDT TRC-20\n–ö–æ—à–µ–ª—ë–∫: TVgXXXXXX...\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ—é –ø–∞—Ä—É üß°")

@dp.message_handler(lambda m: m.text == "üì¶ –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")
async def delivery_handler(message: types.Message):
    await message.answer("–ê–Ω–æ–Ω–∏–º–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–§ –∏ –°–ù–ì. –ü–∏—à–∏, –æ–±—Å—É–¥–∏–º —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
